{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 54, "column": 0}, "map": {"version":3,"sources":["file:///Users/predragvila/Desktop/ocr-app/lib/ocr.js"],"sourcesContent":["require('dotenv').config();\nconst { ocr } = require('llama-ocr');\nconst fs = require('fs').promises; // Use promises for async file operations\nconst path = require('path');\n\n// Helper function to parse Markdown table\nfunction parseMarkdownTable(markdown) {\n    const lines = markdown.split('\\n'); // Split text into lines\n    const data = []; // Store table data\n    let headers = []; // Store table headers\n\n    let isTable = false; // Flag to detect the start of the table\n\n    lines.forEach((line) => {\n        // Skip lines that are not part of the table and separator lines (e.g., \"--- | --- | ---\")\n        if (!isTable) {\n            if (line.match(/\\|/)) {\n                isTable = true; // Start processing the table when a line with '|' is found\n            } else {\n                return; // Skip lines until the table starts\n            }\n        }\n\n        if (line.match(/^\\s*-+\\s*\\|\\s*-+/)) {\n            return; // Skip separator lines\n        }\n\n        // Split the line into columns\n        const columns = line.split('|').map((col) => col.trim());\n\n        if (headers.length === 0) {\n            // The first line is treated as headers\n            headers = columns;\n        } else if (columns.length === headers.length) {\n            // Convert values into a structured object with headers\n            const row = {};\n            headers.forEach((header, i) => {\n                row[header] = columns[i];\n            });\n            data.push(row);\n        }\n    });\n\n    return data; // Return parsed data\n}\n\n// Function to perform OCR with error handling and retry mechanism\nasync function runOCRWithRetry(imagePath, retries = 3) {\n    const apiKey = process.env.TOGETHER_API_KEY; // Load API key from .env file\n\n    if (!apiKey) {\n        console.error('API key is missing. Check your .env file.');\n        throw new Error('API key is missing.');\n    }\n\n    // Ensure the ocr_results folder exists\n    const ocrResultsDir = path.join(process.cwd(), 'public', 'ocr_results');\n    await fs.mkdir(ocrResultsDir, { recursive: true });\n\n    for (let i = 0; i < retries; i++) {\n        try {\n            console.log(`Starting OCR attempt ${i + 1} for image: ${imagePath}`);\n\n            // Perform OCR\n            const markdown = await ocr({\n                filePath: imagePath,\n                apiKey: apiKey,\n            });\n\n            console.log('Raw OCR Output:', markdown);\n\n            // Parse the OCR result to extract table data\n            const tableData = parseMarkdownTable(markdown);\n            console.log('Parsed Data:', tableData);\n\n            if (tableData.length === 0) {\n                console.log('No table data found.');\n                throw new Error('No table data found.');\n            }\n\n            // Save results in JSON format\n            const jsonFilename = path.basename(imagePath, path.extname(imagePath)) + '.json';\n            const jsonFilePath = path.join(ocrResultsDir, jsonFilename);\n            await fs.writeFile(jsonFilePath, JSON.stringify(tableData, null, 2));\n            console.log(`OCR results saved to ${jsonFilePath}`);\n\n            return jsonFilename; // Return the JSON filename for reference\n        } catch (error) {\n            console.error(`OCR attempt ${i + 1} failed:`, error);\n\n            if (i === retries - 1) {\n                console.error('All OCR attempts failed.');\n                throw error; // Throw error on the last attempt\n            }\n        }\n    }\n}\n\n// Export the runOCRWithRetry function for use in API routes\nmodule.exports = { runOCRWithRetry };"],"names":[],"mappings":"AAAA,qEAAkB,MAAM;AACxB,MAAM,EAAE,GAAG,EAAE;AACb,MAAM,KAAK,6DAAc,QAAQ,EAAE,yCAAyC;AAC5E,MAAM;AAEN,0CAA0C;AAC1C,SAAS,mBAAmB,QAAQ;IAChC,MAAM,QAAQ,SAAS,KAAK,CAAC,OAAO,wBAAwB;IAC5D,MAAM,OAAO,EAAE,EAAE,mBAAmB;IACpC,IAAI,UAAU,EAAE,EAAE,sBAAsB;IAExC,IAAI,UAAU,OAAO,wCAAwC;IAE7D,MAAM,OAAO,CAAC,CAAC;QACX,0FAA0F;QAC1F,IAAI,CAAC,SAAS;YACV,IAAI,KAAK,KAAK,CAAC,OAAO;gBAClB,UAAU,MAAM,2DAA2D;YAC/E,OAAO;gBACH,QAAQ,oCAAoC;YAChD;QACJ;QAEA,IAAI,KAAK,KAAK,CAAC,qBAAqB;YAChC,QAAQ,uBAAuB;QACnC;QAEA,8BAA8B;QAC9B,MAAM,UAAU,KAAK,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,MAAQ,IAAI,IAAI;QAErD,IAAI,QAAQ,MAAM,KAAK,GAAG;YACtB,uCAAuC;YACvC,UAAU;QACd,OAAO,IAAI,QAAQ,MAAM,KAAK,QAAQ,MAAM,EAAE;YAC1C,uDAAuD;YACvD,MAAM,MAAM,CAAC;YACb,QAAQ,OAAO,CAAC,CAAC,QAAQ;gBACrB,GAAG,CAAC,OAAO,GAAG,OAAO,CAAC,EAAE;YAC5B;YACA,KAAK,IAAI,CAAC;QACd;IACJ;IAEA,OAAO,MAAM,qBAAqB;AACtC;AAEA,kEAAkE;AAClE,eAAe,gBAAgB,SAAS,EAAE,UAAU,CAAC;IACjD,MAAM,SAAS,QAAQ,GAAG,CAAC,gBAAgB,EAAE,8BAA8B;IAE3E,IAAI,CAAC,QAAQ;QACT,QAAQ,KAAK,CAAC;QACd,MAAM,IAAI,MAAM;IACpB;IAEA,uCAAuC;IACvC,MAAM,gBAAgB,KAAK,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU;IACzD,MAAM,GAAG,KAAK,CAAC,eAAe;QAAE,WAAW;IAAK;IAEhD,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,IAAK;QAC9B,IAAI;YACA,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,IAAI,EAAE,YAAY,EAAE,WAAW;YAEnE,cAAc;YACd,MAAM,WAAW,MAAM,IAAI;gBACvB,UAAU;gBACV,QAAQ;YACZ;YAEA,QAAQ,GAAG,CAAC,mBAAmB;YAE/B,6CAA6C;YAC7C,MAAM,YAAY,mBAAmB;YACrC,QAAQ,GAAG,CAAC,gBAAgB;YAE5B,IAAI,UAAU,MAAM,KAAK,GAAG;gBACxB,QAAQ,GAAG,CAAC;gBACZ,MAAM,IAAI,MAAM;YACpB;YAEA,8BAA8B;YAC9B,MAAM,eAAe,KAAK,QAAQ,CAAC,WAAW,KAAK,OAAO,CAAC,cAAc;YACzE,MAAM,eAAe,KAAK,IAAI,CAAC,eAAe;YAC9C,MAAM,GAAG,SAAS,CAAC,cAAc,KAAK,SAAS,CAAC,WAAW,MAAM;YACjE,QAAQ,GAAG,CAAC,CAAC,qBAAqB,EAAE,cAAc;YAElD,OAAO,cAAc,yCAAyC;QAClE,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,CAAC,YAAY,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE;YAE9C,IAAI,MAAM,UAAU,GAAG;gBACnB,QAAQ,KAAK,CAAC;gBACd,MAAM,OAAO,kCAAkC;YACnD;QACJ;IACJ;AACJ;AAEA,4DAA4D;AAC5D,OAAO,OAAO,GAAG;IAAE;AAAgB"}},
    {"offset": {"line": 139, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 145, "column": 0}, "map": {"version":3,"sources":["file:///Users/predragvila/Desktop/ocr-app/pages/api/process.js"],"sourcesContent":["import fs from 'fs/promises'; // Use promises for async file operations\nimport path from 'path';\nimport { runOCRWithRetry } from '../../lib/ocr'; // Import the OCR function\n\nexport const config = {\n  api: {\n    bodyParser: {\n      sizeLimit: '10mb', // Increase the body size limit\n    },\n  },\n};\n\nexport default async function handler(req, res) {\n  if (req.method !== 'POST') {\n    return res.status(405).json({ error: 'Method not allowed' });\n  }\n\n  const { imageUrl } = req.body;\n\n  if (!imageUrl) {\n    return res.status(400).json({ error: 'imageUrl is required' });\n  }\n\n  // Validate the base64 image format\n  if (!imageUrl.startsWith('data:image/')) {\n    return res.status(400).json({ error: 'Invalid image format' });\n  }\n\n  try {\n    // Use the local `uploads` directory for temporary files\n    const uploadsDir = path.join(process.cwd(), 'uploads');\n    await fs.mkdir(uploadsDir, { recursive: true });\n    console.log('Uploads directory created at:', uploadsDir); // Debugging\n\n    // Save the base64 image to a temporary file\n    const imagePath = path.join(uploadsDir, `temp-${Date.now()}.png`);\n    const base64Data = imageUrl.replace(/^data:image\\/\\w+;base64,/, '');\n    await fs.writeFile(imagePath, Buffer.from(base64Data, 'base64'));\n    console.log('Temporary image saved at:', imagePath); // Debugging\n\n    // Perform OCR with retry mechanism\n    const jsonFilename = await runOCRWithRetry(imagePath);\n    console.log('OCR result saved as:', jsonFilename); // Debugging\n\n    // Delete the temporary image file\n    try {\n      await fs.unlink(imagePath);\n      console.log('Temporary image deleted:', imagePath); // Debugging\n    } catch (error) {\n      console.error('Error deleting temporary image:', error);\n    }\n\n    // Return the JSON filename\n    res.status(200).json({ jsonFilename });\n  } catch (error) {\n    console.error('Error processing image:', error);\n    res.status(500).json({ error: 'Failed to process the image', details: error.message });\n  }\n}"],"names":[],"mappings":";;;;AAAA,2MAA8B,yCAAyC;AACvE;AACA,2KAAiD,0BAA0B;;;;AAEpE,MAAM,SAAS;IACpB,KAAK;QACH,YAAY;YACV,WAAW;QACb;IACF;AACF;AAEe,eAAe,QAAQ,GAAG,EAAE,GAAG;IAC5C,IAAI,IAAI,MAAM,KAAK,QAAQ;QACzB,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAqB;IAC5D;IAEA,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,IAAI;IAE7B,IAAI,CAAC,UAAU;QACb,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAuB;IAC9D;IAEA,mCAAmC;IACnC,IAAI,CAAC,SAAS,UAAU,CAAC,gBAAgB;QACvC,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;QAAuB;IAC9D;IAEA,IAAI;QACF,wDAAwD;QACxD,MAAM,aAAa,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI;QAC5C,MAAM,qHAAA,CAAA,UAAE,CAAC,KAAK,CAAC,YAAY;YAAE,WAAW;QAAK;QAC7C,QAAQ,GAAG,CAAC,iCAAiC,aAAa,YAAY;QAEtE,4CAA4C;QAC5C,MAAM,YAAY,iGAAA,CAAA,UAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,KAAK,GAAG,GAAG,IAAI,CAAC;QAChE,MAAM,aAAa,SAAS,OAAO,CAAC,4BAA4B;QAChE,MAAM,qHAAA,CAAA,UAAE,CAAC,SAAS,CAAC,WAAW,OAAO,IAAI,CAAC,YAAY;QACtD,QAAQ,GAAG,CAAC,6BAA6B,YAAY,YAAY;QAEjE,mCAAmC;QACnC,MAAM,eAAe,MAAM,CAAA,GAAA,mGAAA,CAAA,kBAAe,AAAD,EAAE;QAC3C,QAAQ,GAAG,CAAC,wBAAwB,eAAe,YAAY;QAE/D,kCAAkC;QAClC,IAAI;YACF,MAAM,qHAAA,CAAA,UAAE,CAAC,MAAM,CAAC;YAChB,QAAQ,GAAG,CAAC,4BAA4B,YAAY,YAAY;QAClE,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;QACnD;QAEA,2BAA2B;QAC3B,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE;QAAa;IACtC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,2BAA2B;QACzC,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YAAE,OAAO;YAA+B,SAAS,MAAM,OAAO;QAAC;IACtF;AACF"}},
    {"offset": {"line": 214, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":["file:///Users/predragvila/Desktop/ocr-app/node_modules/next/dist/src/server/route-modules/pages-api/module.compiled.js"],"sourcesContent":["if (process.env.NEXT_RUNTIME === 'edge') {\n  module.exports = require('next/dist/server/route-modules/pages-api/module.js')\n} else {\n  if (process.env.NODE_ENV === 'development') {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.dev.js')\n  } else if (process.env.TURBOPACK) {\n    module.exports = require('next/dist/compiled/next-server/pages-api-turbo.runtime.prod.js')\n  } else {\n    module.exports = require('next/dist/compiled/next-server/pages-api.runtime.prod.js')\n  }\n}\n"],"names":["process","env","NEXT_RUNTIME","module","exports","require","NODE_ENV","TURBOPACK"],"mappings":"AAAA,IAAIA,QAAQC,GAAG,CAACC,YAAY,KAAK,MAAQ;;AAEzC,OAAO;IACL,IAAIF,QAAQC,GAAG,CAACK,QAAQ,KAAK,WAAe;QAC1CH,OAAOC,OAAO,GAAGC,QAAQ;IAC3B,OAAO,IAAIL,QAAQC,GAAG,CAACM,SAAS,EAAE;;IAIlC;AACF","ignoreList":[0]}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 234, "column": 0}, "map": {"version":3,"sources":["file:///Users/predragvila/Desktop/ocr-app/node_modules/next/dist/src/server/route-kind.ts"],"sourcesContent":["export const enum RouteKind {\n  /**\n   * `PAGES` represents all the React pages that are under `pages/`.\n   */\n  PAGES = 'PAGES',\n  /**\n   * `PAGES_API` represents all the API routes under `pages/api/`.\n   */\n  PAGES_API = 'PAGES_API',\n  /**\n   * `APP_PAGE` represents all the React pages that are under `app/` with the\n   * filename of `page.{j,t}s{,x}`.\n   */\n  APP_PAGE = 'APP_PAGE',\n  /**\n   * `APP_ROUTE` represents all the API routes and metadata routes that are under `app/` with the\n   * filename of `route.{j,t}s{,x}`.\n   */\n  APP_ROUTE = 'APP_ROUTE',\n\n  /**\n   * `IMAGE` represents all the images that are generated by `next/image`.\n   */\n  IMAGE = 'IMAGE',\n}\n"],"names":["RouteKind"],"mappings":";;;AAAO,IAAWA,YAAAA,WAAAA,GAAAA,SAAAA,SAAAA;IAChB;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;IAED;;GAEC,GAAA,SAAA,CAAA,YAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,WAAA,GAAA;IAED;;;GAGC,GAAA,SAAA,CAAA,YAAA,GAAA;IAGD;;GAEC,GAAA,SAAA,CAAA,QAAA,GAAA;WAtBeA;MAwBjB","ignoreList":[0]}},
    {"offset": {"line": 257, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":["file:///Users/predragvila/Desktop/ocr-app/node_modules/next/dist/src/build/templates/helpers.ts"],"sourcesContent":["/**\n * Hoists a name from a module or promised module.\n *\n * @param module the module to hoist the name from\n * @param name the name to hoist\n * @returns the value on the module (or promised module)\n */\nexport function hoist(module: any, name: string) {\n  // If the name is available in the module, return it.\n  if (name in module) {\n    return module[name]\n  }\n\n  // If a property called `then` exists, assume it's a promise and\n  // return a promise that resolves to the name.\n  if ('then' in module && typeof module.then === 'function') {\n    return module.then((mod: any) => hoist(mod, name))\n  }\n\n  // If we're trying to hoise the default export, and the module is a function,\n  // return the module itself.\n  if (typeof module === 'function' && name === 'default') {\n    return module\n  }\n\n  // Otherwise, return undefined.\n  return undefined\n}\n"],"names":["hoist","module","name","then","mod","undefined"],"mappings":"AAAA;;;;;;CAMC,GACD;;;AAAO,SAASA,MAAMC,MAAW,EAAEC,IAAY;IAC7C,qDAAqD;IACrD,IAAIA,QAAQD,QAAQ;QAClB,OAAOA,MAAM,CAACC,KAAK;IACrB;IAEA,gEAAgE;IAChE,8CAA8C;IAC9C,IAAI,UAAUD,UAAU,OAAOA,OAAOE,IAAI,KAAK,YAAY;QACzD,OAAOF,OAAOE,IAAI,CAAC,CAACC,MAAaJ,MAAMI,KAAKF;IAC9C;IAEA,6EAA6E;IAC7E,4BAA4B;IAC5B,IAAI,OAAOD,WAAW,cAAcC,SAAS,WAAW;QACtD,OAAOD;IACT;IAEA,+BAA+B;IAC/B,OAAOI;AACT","ignoreList":[0]}},
    {"offset": {"line": 290, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":["file:///Users/predragvila/Desktop/ocr-app/node_modules/next/dist/src/build/templates/pages-api.ts"],"sourcesContent":["import { PagesAPIRouteModule } from '../../server/route-modules/pages-api/module.compiled'\nimport { RouteKind } from '../../server/route-kind'\n\nimport { hoist } from './helpers'\n\n// Import the userland code.\nimport * as userland from 'VAR_USERLAND'\n\n// Re-export the handler (should be the default export).\nexport default hoist(userland, 'default')\n\n// Re-export config.\nexport const config = hoist(userland, 'config')\n\n// Create and export the route module that will be consumed.\nexport const routeModule = new PagesAPIRouteModule({\n  definition: {\n    kind: RouteKind.PAGES_API,\n    page: 'VAR_DEFINITION_PAGE',\n    pathname: 'VAR_DEFINITION_PATHNAME',\n    // The following aren't used in production.\n    bundlePath: '',\n    filename: '',\n  },\n  userland,\n})\n"],"names":["PagesAPIRouteModule","RouteKind","hoist","userland","config","routeModule","definition","kind","PAGES_API","page","pathname","bundlePath","filename"],"mappings":";;;;;AAAA,SAASA,mBAAmB,QAAQ,uDAAsD;AAC1F,SAASC,SAAS,QAAQ,0BAAyB;AAEnD,SAASC,KAAK,QAAQ,YAAW;AAEjC,4BAA4B;AAC5B,YAAYC,cAAc,eAAc;;;;;yMAGzBD,QAAAA,EAAMC,kHAAU,WAAU;AAGlC,MAAMC,2KAASF,QAAAA,EAAMC,kHAAU,UAAS;AAGxC,MAAME,cAAc,qMAAIL,sBAAAA,CAAoB;IACjDM,YAAY;QACVC,8JAAMN,YAAAA,CAAUO,SAAS;QACzBC,MAAM;QACNC,UAAU;QACV,2CAA2C;QAC3CC,YAAY;QACZC,UAAU;IACZ;cACAT;AACF,GAAE","ignoreList":[0]}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}